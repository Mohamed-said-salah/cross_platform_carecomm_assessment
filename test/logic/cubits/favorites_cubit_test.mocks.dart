// Mocks generated by Mockito 5.4.5 from annotations
// in cross_platform_product_listing_assessment/test/logic/cubits/favorites_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cross_platform_product_listing_assessment/core/services/cache_manager.dart'
    as _i2;
import 'package:cross_platform_product_listing_assessment/core/services/favorites_caching_service.dart'
    as _i3;
import 'package:cross_platform_product_listing_assessment/data/models/product_model.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCacheManager_0 extends _i1.SmartFake implements _i2.CacheManager {
  _FakeCacheManager_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FavoritesCachingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoritesCachingService extends _i1.Mock
    implements _i3.FavoritesCachingService {
  MockFavoritesCachingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CacheManager get cacheManager =>
      (super.noSuchMethod(
            Invocation.getter(#cacheManager),
            returnValue: _FakeCacheManager_0(
              this,
              Invocation.getter(#cacheManager),
            ),
          )
          as _i2.CacheManager);

  @override
  _i4.Future<List<_i5.ProductModel>?> getFavoriteProductsFromCache() =>
      (super.noSuchMethod(
            Invocation.method(#getFavoriteProductsFromCache, []),
            returnValue: _i4.Future<List<_i5.ProductModel>?>.value(),
          )
          as _i4.Future<List<_i5.ProductModel>?>);

  @override
  _i4.Future<bool> addFavoriteProduct(_i5.ProductModel? product) =>
      (super.noSuchMethod(
            Invocation.method(#addFavoriteProduct, [product]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<_i5.ProductModel?> getFavoriteProductById(int? productId) =>
      (super.noSuchMethod(
            Invocation.method(#getFavoriteProductById, [productId]),
            returnValue: _i4.Future<_i5.ProductModel?>.value(),
          )
          as _i4.Future<_i5.ProductModel?>);

  @override
  _i4.Future<bool> removeFavoriteProduct(_i5.ProductModel? product) =>
      (super.noSuchMethod(
            Invocation.method(#removeFavoriteProduct, [product]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}
